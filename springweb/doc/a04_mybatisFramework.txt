# 스프링에서 DB 연결처리
1. 기본개념
	스프링 컨테이너에 DB서버와 연결처리해주는 Dao를 할당하여 처리한다.
	1) Dao연동하는 클래스 작성
	2) 컨테이너에 등록
	3) autowiring으로 해당 객체를 controller, service에서 호출하여 처리
	
2. mybatis라는 프레임워크 활용
	위와 같이 dao를 컨테이너에 등록하듯이, 연결처리의 효율/ 연결시 보안처리/
	데이터베이스 효과적인 로딩/ 예외 처리 등 여러가지 효율적인 기능을 포함하고 
	손쉽게 DB처리를 하는 프레임워크인 mybatis를 사용하여 처리하는 것을 말한다. 
	1) 처리순서(환경설정)
	- 공통 환경설정 : 컨테이너에 사용하는 franework의 lib객체를 선언하여 처리할 수 있게한다.
		[dbcp(database connection pool) 설정]
		공통 mybatis 프레임워크 위 dpbcp와 연동 처리
		mybatis 에서 사용하는 xml 파일 선언
		각 업무단위별로 mybatis를 설정하여 sql을 처리하는 mapper 파일 선언
		
	-  업무별로 설정 처리 파일 등록
		sql 작성 확인(입력/출력할 내용 확인)
		dto/vo 작성
		dao 인터페이스 설정(입력값/리턴할 메서드 선언)
		-> framework를 통해 자동으로 DB처리하는 실제 객체를 만들어 준다.
		공통 vo/dto 공통 mybaits 설정 파일에 등록
		사용할 sql 처리 mapper 파일 생성 및 설정 파일에 등록
		위 dao 인터페이스와 연동하는 규칙에 따라 mapper.xml 파일 생성
		service/controller 호출하여 모델 데이터 처리 및 확인.
		
### A01_Dao.java(인터페이스), ExpMapper.xml(xml)
==> 내부적으로 실제 dao 파일을 만들어준다.
그래서 service 해서 호출하여 사용할 수 있다. 

Service파일..		
		
### Mybatis DB연동 연습 ###
[sql]
	select count(*) from emp;
		[public int getEmpCount();]
	
	select ename from emp where empno=7492
		[public String getEmpStr();]
	
		
	사원정보의 데이터 건수 검색
	결과는 12 ==> 프로그램적으로 결과를 가져오려면 기능 메서드 필요
	[public int getEmpCount();]
	==> 해당 메서드를 통해서 sql의 결과를 프로그램적으로 가져온다.
	service 단에서 "사원정보의 수 :"+dao.getEmpCount();
===============================================================================

springweb\a02_mvc\a03_dao\A01_Dao.java
	인터페이스(껍데기만 있으면 ok, 입력값, 리턴값, 메서드명)
	public int getEmpCount();
	==> sql의 결과를 담기위한 메서드 선언(리턴값, 메서드명, 매개변수 유형)
	select count(*) from emp where deptno=?
	
	public int getEmpByDeptno(int deptno);

===============================================================================

resource\ExpMapper.xml
	<select id="getEmpCount" resultType="int">
		select count(*) from emp
	</select>
	
	<selct id="getEmpByDeptno" resultType="int">
		select count(*) from emp where deptno=#{deptno}
	</select>

0. 규칙
	- 1단계
	XXXmapper.xml // dao 인터페이스 만들기
	1) namespace // dao 인터페이스명
	
	2) id // 메서드명
	
	3) resultType // 리턴값 처리 
	   resultMap 
	
	4) parameterType // 매개변수 처리 
	
	- 2단계
	dao인터페이스
	@Select("처리할 sql")
	public 리턴유형 메서드명(매개변수처리);

1. 리턴값 연습(XXmapper.xml resultType/resultMap )
	1) 단일 데이터 (숫자,문자열)
	
	[sql] 
	select count(*) from emp
	[사용할 메서드]
	public int getCountEmp();
	
	=>
	<select id="getCountEmp" resultType="int">
		select count(*) from emp
	</select>
	
	2) 객체 데이터
		public Emp getEmp();
		// emp : ailas로 선언시에는 그 이름으로 아니라면 패키지명 포함 객체 선언.
		
		<select id="getEmp" resultType="emp">
			select * from emp where empno=7369
		</select>
	
	3) List 데이터(resultType, resultMap)
		1] sql 
		2] 다중의 list가 나오면 단위 객체 vo로 만들어 alias 등록, resultType에 설정
		3] dao 설정	
		
	
2. 매개변수 연습
	1) 단일 데이터 :
		- 숫자
		- 문자열
	
	2) Map(key/value)
	
	3) VO

	4) List 

3. 리턴값 / 매개변수 처리 연습
	1) 리턴값/ 매개변수가 동시에 있는 형식..

## Mybatis 환경설정
1. 파일
	1) dispatcher-servlet.xml(컨테이너 설정)
		- 연결객체
		- (옵션) 트렌젝션 설정
		- 공통마이바티즈 설정파일 지정
		- dao 인터페이스 패키지 위치 지정
	
	2) java\resource\mybatis.Spring.xml(마이바티즈 공통설정)
		패키지명이 긴 객체를 alias(별칭) 으로 간단하게 설정 mapper 파일에서 활용 
		추가할 XXXMapper.xml 을 선언
		
	3) java\resource\XXXmapper.xml(업무 단위별 mapper)
		[최상단선언]
		<mapper namespace => dao 패키지+인터페이스명 등록> </mapper> 
		
		[하위 각 요소] : select, insert, update, delete
		id => 메서드명 (dao)
		resultType/ resultMap => 리턴타입(dao)
		parameterType => 메서드의 매개변수 타입(dao)
		#{property/변수명} => preparedstatement
		${문자열변수} => 동적 query
		
		+ ognl(jstl의 형식 차용) : <if test="ename!=null">
		-> 조건문 반복문에 의해 동적 query 생성
	
	4) java\springweb\a02_mvc\a03_dao\A01_Dao.java(업무 단위별 dao 인터페이스)
	
	5) service단 : 위 dao를 mapper/mybatis에 의해 만들어진 인터페이스를 상속받은 하위 객체들 활용/호출하여 처리
	
## DB연동 처리 형식
0. 기본DB
      
1. dataSource(기본 연결 정보 처리 객체)
<bean id="dataSource" class="org.apache.commons.dbcp.BasicDataSource" destroy-method="close"> <!-- 자원해제하는 메서드 선언 -->
	  <property name="driverClassName" value="oracle.jdbc.driver.OracleDriver"/>
	  <property name="url" value="jdbc:oracle:thin:@localhost:1521:xe"/>
	  <property name="username" value="scott"/>
      <property name="password" value="tiger"/>
</bean>
      
[mybatis framework를 컨테이너에서 사용하기..]
2. transactionManager(트랜잭션 처리 - optional) 
     1) 공통 mybatis 설정 xml
     2) 객체를 자동생성 하게 하는 dao interface 위치 선언. 
      [트렌젝션? 트랜잭션(Transaction 이하 트랜잭션)이란, 데이터베이스의 상태를 변화시키기 해서 수행하는 작업의 단위를 뜻한다.
      간단하게 말해서 아래의 질의어(SQL)를 이용하여 데이터베이스를 접근 하는 것을 의미한다.]
      -> ref="dataSource" (위 연결 객체 할당)
      	
3. sqlSesscionFactory(mybatis framework 연결 및 공통 설정 파일 지정)
      [SqlSessionFactory는 데이터베이스와의 연결과 SQL의 실행에 대한 모든 것을 가진 가장 중요한 객체다. 이 객체가 DataSource를 참조하여 MyBatis와 Mysql 서버를 연동시켜준다]
      -> ref="dataSource" (위 연결 객체 할당)
      	
      configLocation::/resource/mybatis.Spring.xml(공통파일)
      	== 사용할 vo의 alias명 지정
      		사용할 mapper.xml 설정 처리..
      		typeAlias alias="emp" type="springweb.z01_vo.Emp"
      		mapper source="resource/ExpMapper.xml"
      		== XXXMapper.xml
				mapper namespace="springwep.a02_mvc.a03_dao.A01_Dao"
				<select id="" parameterType="" resultType="">
					==> 활용할 sql
				</select>
				== 연동된 dao 인터페이스
			      	
4. MapperScannerConfigurce : 
      	자동 객체생성 interface dao 패키지 범위 설정
      	1) basePackage : springweb.a02_mvc.a03_dao
      	해당 패키지 안에 있는 모든 Dao interface는 실제 객체를 상속해서 DB연결 처리해준다..
      	
      	2) 위 내용에서 다른 패키지를 추가하려면 아래 형식으로 처리하면 된다. 
      		value="패키지1, 패키지2,..."
      		,로 구분하여 추가 처리...

### 주로 발생하는 error 유형
0. 객체를 인식하지 못하는 경우 java는 만들어져 있으나, 톰캣에서 사용할 때.
	class가 연관간계자 처리 안되어 객체 인식 못하는 경우.. clean 재시작
	또는 상단메뉴 project / clean, automatically 체크 여부 확인
1. oraXXX => 100% sql 문제(mapper안에 있는 sql 살펴보기)
2. sqlBadGram.. => sql문제 이거나 ; 없어야되는데 있는지 확인하기
3. dao bean null => dao 패키지 선언(설정 확인)


	
## DB 연결시 순서 ##

1. sql 작성
	입력값 ?
	출력값 ? 
	확인 type, 다중 데이터 여부 확인

2. VO 객체 or 일반 type
	1) 입력할때 사용할
	2) 출력(리턴할 때) 사용할	
	
3. dao interface 선언
	1) 입력/출력/기능메서드를 매개변수/리턴값/메서드명

4. mybatis.String.xml에 
	1) alias VO객체 등록
	2) 추가할 mapper.xml이 있으면 등록
	
5. XXXmapper.xml
	1) 위 등록한 alias 와 mapper.xml 을 활용하여 
	2) namespace명 : 인터페이스명
	3) id명 : 메서드명
	4) resultType : 리턴타입유형(alias 활용)
	5) parameterType : 매개변수타입유형(alias 활용 가능)
	6) sql 처리 및 매개변수 활용를 위한 선언
		#{변수명}, #{property} 선언
		
6. service단에서 dao 호출 및 해당 메서드 확인
	@Autowired 
	private @@@Dao.~ dao
	
	dao.XXXX() 메서드 호출 확인
	
	
	
	
		