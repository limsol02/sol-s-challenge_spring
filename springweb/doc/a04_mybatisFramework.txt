# 스프링에서 DB 연결처리
1. 기본개념
	스프링 컨테이너에 DB서버와 연결처리해주는 Dao를 할당하여 처리한다.
	1) Dao연동하는 클래스 작성
	2) 컨테이너에 등록
	3) autowiring으로 해당 객체를 controller, service에서 호출하여 처리
	
2. mybatis라는 프레임워크 활용
	위와 같이 dao를 컨테이너에 등록하듯이, 연결처리의 효율/ 연결시 보안처리/
	데이터베이스 효과적인 로딩/ 예외 처리 등 여러가지 효율적인 기능을 포함하고 
	손쉽게 DB처리를 하는 프레임워크인 mybatis를 사용하여 처리하는 것을 말한다. 
	1) 처리순서(환경설정)
	- 공통 환경설정 : 컨테이너에 사용하는 franework의 lib객체를 선언하여 처리할 수 있게한다.
		[dbcp(database connection pool) 설정]
		공통 mybatis 프레임워크 위 dpbcp와 연동 처리
		mybatis 에서 사용하는 xml 파일 선언
		각 업무단위별로 mybatis를 설정하여 sql을 처리하는 mapper 파일 선언
		
	-  업무별로 설정 처리 파일 등록
		sql 작성 확인(입력/출력할 내용 확인)
		dto/vo 작성
		dao 인터페이스 설정(입력값/리턴할 메서드 선언)
		-> framework를 통해 자동으로 DB처리하는 실제 객체를 만들어 준다.
		공통 vo/dto 공통 mybaits 설정 파일에 등록
		사용할 sql 처리 mapper 파일 생성 및 설정 파일에 등록
		위 dao 인터페이스와 연동하는 규칙에 따라 mapper.xml 파일 생성
		service/controller 호출하여 모델 데이터 처리 및 확인.
		
### A01_Dao.java(인터페이스), ExpMapper.xml(xml)
==> 내부적으로 실제 dao 파일을 만들어준다.
그래서 service 해서 호출하여 사용할 수 있다. 

Service파일..		
		
### Mybatis DB연동 연습 ###
[sql]
	select count(*) from emp;
		[public int getEmpCount();]
	
	select ename from emp where empno=7492
		[public String getEmpStr();]
	
		
	사원정보의 데이터 건수 검색
	결과는 12 ==> 프로그램적으로 결과를 가져오려면 기능 메서드 필요
	[public int getEmpCount();]
	==> 해당 메서드를 통해서 sql의 결과를 프로그램적으로 가져온다.
	service 단에서 "사원정보의 수 :"+dao.getEmpCount();
===============================================================================

springweb\a02_mvc\a03_dao\A01_Dao.java
	인터페이스(껍데기만 있으면 ok, 입력값, 리턴값, 메서드명)
	public int getEmpCount();
	==> sql의 결과를 담기위한 메서드 선언(리턴값, 메서드명, 매개변수 유형)
	select count(*) from emp where deptno=?
	
	public int getEmpByDeptno(int deptno);

===============================================================================

resource\ExpMapper.xml
	<select id="getEmpCount" resultType="int">
		select count(*) from emp
	</select>
	
	<selct id="getEmpByDeptno" resultType="int">
		select count(*) from emp where deptno=#{deptno}
	</select>

0. 규칙
	- 1단계
	XXXmapper.xml // dao 인터페이스 만들기
	1) namespace // dao 인터페이스명
	
	2) id // 메서드명
	
	3) resultType // 리턴값 처리 
	   resultMap 
	
	4) parameterType // 매개변수 처리 
	
	- 2단계
	dao인터페이스
	@Select("처리할 sql")
	public 리턴유형 메서드명(매개변수처리);

1. 리턴값 연습(XXmapper.xml resultType/resultMap )
	1) 단일 데이터 (숫자,문자열)
	
	[sql] 
	select count(*) from emp
	[사용할 메서드]
	public int getCountEmp();
	
	=>
	<select id="getCountEmp" resultType="int">
		select count(*) from emp
	</select>
	
	2) 객체 데이터
		public Emp getEmp();
		// emp : ailas로 선언시에는 그 이름으로 아니라면 패키지명 포함 객체 선언.
		
		<select id="getEmp" resultType="emp">
			select * from emp where empno=7369
		</select>
	
	3) List 데이터(resultType, resultMap)
		1] sql 
		2] 다중의 list가 나오면 단위 객체 vo로 만들어 alias 등록, resultType에 설정
		3] dao 설정	
		
	
2. 매개변수 연습
	1) 단일 데이터 :
		- 숫자
		- 문자열
	
	2) Map(key/value)
	
	3) VO

	4) List 

3. 리턴값 / 매개변수 처리 연습
	1) 리턴값/ 매개변수가 동시에 있는 형식..
	
## DB 연결시 순서 ##

1. sql 작성
	입력값 ?
	출력값 ? 
	확인 type, 다중 데이터 여부 확인

2. VO 객체 or 일반 type
	1) 입력할때 사용할
	2) 출력(리턴할 때) 사용할	
	
3. dao interface 선언
	1) 입력/출력/기능메서드를 매개변수/리턴값/메서드명

4. mybatis.String.xml에 
	1) alias VO객체 등록
	2) 추가할 mapper.xml이 있으면 등록
	
5. XXXmapper.xml
	1) 위 등록한 alias 와 mapper.xml 을 활용하여 
	2) namespace명 : 인터페이스명
	3) id명 : 메서드명
	4) resultType : 리턴타입유형(alias 활용)
	5) parameterType : 매개변수타입유형(alias 활용 가능)
	6) sql 처리 및 매개변수 활용를 위한 선언
		#{변수명}, #{property} 선언
		
6. service단에서 dao 호출 및 해당 메서드 확인
	@Autowired 
	private @@@Dao.~ dao
	
	dao.XXXX() 메서드 호출 확인
	
	
	
	
		