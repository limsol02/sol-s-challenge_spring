1. 흥미로운 도입
당신은 대형쇼핑몰에 입장합니다. 입구에서 아이디 카드를 받아, 이를 통해 여러 매장에 접근합니다.
각 매장은 카드를 확인하고, 당신에게 특정 서비스를 제공합니다. 이 아이디카드는 웹 애플리케이션의
'세션'과 같습니다. 사용자가 로그인허면, 서버는 그 사용자를 식별하는 세션을 생성합니다. 이를 통해
사용자는 다양한 서비스에 접근하고, 서버는 사용자의 권한을확인할 수 있죠. 
이제 Spring을 사용한 세션처리와 권한 설정의 세계로 빠져봅시다!

2. 학습목표
- Spring에서 세션 처리 방법 이헤
- 세션 기반의 사요자 권한 관리 방법 학습
- 세션과 쿠키의 차이점과 각각의 사용 시나리오 파악
- Spring Security를 이용한 권한 기반 저근 제어
 
3. 주요 핵심 키워드와 개념
- 새션(Session) : 서버가 각 클라이언트의 상태를 유지하는 방법
- 쿠키(Cookie) : 클라이언트 측에 저장되어 있는 작은 데이터 조각 
- Spring Security : 인증 및 권한 부여를 위한 Spring 프레임워크 모듈
- 인증(Authentication) vs 권한부여(Authorization)
- 세션 저장소 : In-memory, JDBC, Redis 등 세션 데이터 저장 방법

4. 생각하고 토론해볼 내용
- 세변기반인증과 토큰기반 인증의 차이점과 장단점은 무엇일까요?
- 세션 하이재킹(Session Hijacking)을 방지하기 위한 보안 조치에는 어떤것들이 있을까요?
- 대규모 분산 시스템에서 세션 관리를 어떻게 효율적으로 할 수 있을까요?

5. 간단한 퀴즈
1. Spring security에서 `@PreAuthorize` 어노테이션은 어떤 목적으로 사용합니까?
2. 쿠키와 세션의 주요 차이점은 무엇입니까?
3. 세션 저장소로 Redis를 사용하는 이유는 무엇일까여?

6. 실무적용
- 사용자 로그인 및 세션 생성 : 사용자가 로그인하면 Spring Security는 사용자 세션을 생성하고 관리합니다.
- 권한에 따른 접근제어 : 사용자의 권한(예:관리자,일반사용자)에 따라 다른 페이지 접근을 제어합니다.
- 세션만료 및 보안관리 : 세션 타임아웃 설정, 동시세션제어, 세션 고정보호 등을 통해 보안을 강화합니다.
- 분산 시스템에서의 세션관리 : Redis와 같은 외부 세션 저장소를 사용하여 여러 서버에서 세션을 일관되게 관리합니다. 