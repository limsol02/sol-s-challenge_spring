### 스프링 채팅연동

1. 도입
전세계 사람들이 서로 다른장소에서 서로의 생각을 실시간으로 공유하는 것처럼, 채팅 애플리케이션은 현대 커뮤니케이션의 핵심입니다.
이제 우리는 Spring 프레임워크를 사용하여 이런 마법같은 채팅 시스템을 직접 구축해볼것입니다.
웹 소켓과 Spring의 결합을 통해 실시간 커뮤니케이션의 세계로 들어가봅시다!

2. 학습목표
- Spring과 웹소켓을 이용한 채팅 애플리케이션 구현방법을 이해합니다.
- 메시지 교환과 실시간 통신의 기본 원리를 학습합니다.
- 프론트엔드와 백엔드 간의 통신방법을 숙지합니다.

3. 핵심키워드
- Spring framework : 자바기반의 강력한 애플리케이션 개발 프레임워크
- websocket : 실시간 양방향 통신을 위한 프로토콜
- STOMP(Simple Text Oriented Messaging Protocol) : 메시징 프로토콜로 WebSocket 위에서 동작
- Rest API : 서버와 클라이언트 간 통신을 위한 API 설계 가이드

4. 생각 토론
- 실시간 채팅 애플리케이션에서 WebSocket의 역할과 중요성에 대해 논의해보세요
- REST API와 WebSocket을 결합하여 사용할 때의 장단점은 무엇일까요?
- 대규모 트래픽에서의 채팅 어플리케이션 성능 최적화 전략은 무엇일까요?

5. 간단한 퀴즈
- WebSocket이 Http와 다른점은 무엇일까요?
- STOMP 프로토콜의 주요 기능은 무엇인가요?

6. 실무
- 기업 내부 커뮤니케이션 도구 : 직원들 간의 실시간 커뮤니케이션을 지원하는 내부 채팅 시스템 개발
- 고객지원 채팅 시스템 : 웹사이트 방문자와 실시간으로 상담할 수 있는 고객 지원 채팅
- 게임 내 채팅 시스템 : 온라인 멀티플레이어 게임 내에서 플레이어간의 실시간 대화를 위한 시스템 구현